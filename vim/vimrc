" Compatibility shim when upgrading from vim -> neovim
if has('nvim')
	set runtimepath^=~/.vim runtimepath+=~/.vim/after
	let &packpath = &runtimepath
endif

" Use Vim settings:
" This must be first, because it changes other options as a side effect.
set nocompatible

" Set leader to space
let mapleader = "\<Space>"

" Leader keypress delay before accepting command:
"set timeoutlen=750

" ~~~~ vim-plug ~~~~
call plug#begin('~/.vim/plugged')
	" Finding
	if has('nvim')
    Plug 'ibhagwan/fzf-lua', {'branch': 'main'}
    " optional for icon support
    Plug 'nvim-tree/nvim-web-devicons'
		" Plug 'nvim-lua/plenary.nvim'
		" Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.3' }
		" Plug 'nvim-telescope/telescope-file-browser.nvim'
	else
		Plug 'junegunn/fzf.vim'
	endif
  " Bookmarks
  Plug 'kshenoy/vim-signature'
  " Better buffer handling
  Plug 'qpkorr/vim-bufkill'
  " Text utils
  Plug 'tomtom/tcomment_vim'
  Plug 'ntpeters/vim-better-whitespace'
  Plug 'tpope/vim-surround'
  " Themes
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  " LSP
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()

" Post initialization for neovim-specific plugins:
" if has('nvim')
"   lua require("telescope").load_extension "file_browser"
"   "lua require("config.telescope").load_extension "file_browser"
" end

" Make backspace behave in a sane manner.
set backspace=indent,eol,start

" Switch syntax highlighting on
syntax on

" Enable file type detection and do language-dependent indenting.
filetype plugin indent on


" " Enable lazy redraw
" set lazyredraw

" Enable sign column
set signcolumn=yes

" Show line numbers
set number

" Show tab characters
set list

" Display tab characters with >-
"set listchars=tab:﹍﹍
set listchars=tab:··,extends:›,precedes:‹,nbsp:·,trail:·

" Tabs are spaces
set expandtab

" Set relative line number
set relativenumber

" Allow hidden buffers, don't limit to 1 file per window/split
set hidden

" Don't wrap lines by default
set nowrap

" Show the ruler
set ruler

" Show the column marker at 80 chars
set colorcolumn=80

" Number of visual spaces per TAB
set tabstop=2

" Number of spaces to use for (auto)indent step
set shiftwidth=2

" Add full file path to your existing statusline
set statusline+=%F

" Highlight current line
set cursorline

" What font do I want?
set guifont=Monaco:h14

" highlight matches
set hlsearch

" incremental searching
set incsearch

" searches are case insensitive...
set ignorecase

" auto re-read file contents if they've changed on disk:
set autoread

" clear highlighted search matches
nnoremap <leader><space> :nohlsearch<CR>

" ... unless they contain at least one capital letter
set smartcase

" show matching braces and brackets
set showmatch

" add angle brackets to matching:
set matchpairs+=<:>

" enable wildmenu"
set wildmenu
set wildignorecase
set wildmode=full

" Set how autocompletion menus work:
set completeopt=menuone,longest

" Show the current command in the bottom-right part of vim.
" For instance if you want to go to change the current word with 'cw', 'c'
" will first be displayed as the pending command
set showcmd

" Give more space for displaying messages.
set cmdheight=2

" Switch to the directory of the file that is being edited:
" set autochdir

" Enable true color terminal support:
if (has("termguicolors"))
  set termguicolors
endif

" Used by CoC and other plugins:
"
" Explanation: The length of time Vim waits after you stop typing before it
"
" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=250

" Use the system clipboard if possible:
"   https://vim.fandom.com/wiki/Accessing_the_system_clipboard
if (has("clipboard"))
  set clipboard=unnamedplus
endif

" === Mouse ===================================================================

" Disable mouse
set mouse=
"set ttymouse=

" " Only allow mouse selection in normal+visual mode
" set mouse=nv
" "set mouse=
" set selectmode=
"
" === Scrolling ===============================================================

" ctrl-e & ctrl-y scroll 2 lines at a time:
nnoremap <C-e> 2<C-e>
nnoremap <C-y> 2<C-y>

" === fzf setup for all usage later in this configuration =====================

" https://github.com/ibhagwan/fzf-lua
lua << EOF
require('nvim-web-devicons').setup {
 -- your personnal icons can go here (to override)
 -- you can specify color or cterm_color instead of specifying both of them
 -- DevIcon will be appended to `name`
 override = {
  zsh = {
    icon = "",
    color = "#428850",
    cterm_color = "65",
    name = "Zsh"
  }
 };
 -- globally enable different highlight colors per icon (default to true)
 -- if set to false all icons will have the default icon's color
 color_icons = true;
 -- globally enable default icons (default to false)
 -- will get overriden by `get_icons` option
 default = true;
 -- globally enable "strict" selection of icons - icon will be looked up in
 -- different tables, first by filename, and if not found by extension; this
 -- prevents cases when file doesn't have any extension but still gets some icon
 -- because its name happened to match some extension (default to false)
 strict = true;
 -- same as `override` but specifically for overrides by filename
 -- takes effect when `strict` is true
 override_by_filename = {
  [".gitignore"] = {
    icon = "",
    color = "#f1502f",
    name = "Gitignore"
  }
 };
 -- same as `override` but specifically for overrides by extension
 -- takes effect when `strict` is true
 override_by_extension = {
  ["log"] = {
    icon = "",
    color = "#81e043",
    name = "Log"
  }
 };
}


FZF = require('fzf-lua')
FZF.setup({'fzf-native'})
EOF

" === Buffers =================================================================

" Show the list of buffers using fzf:
if has('nvim')
	" - Using telescope:
	" noremap <nowait> <leader>b :Telescope buffers<CR>
	" noremap <leader><Tab> :Telescope buffers<CR>
	noremap <leader>b <cmd>lua FZF.buffers()<CR>
	noremap <leader><tab> <cmd>lua FZF.buffers()<CR>
else
	" - Using fzf:
	noremap <nowait> <leader>b :Buffers<CR>
endif

" Use Bufkill's :BD command to close a buffer while preserving the window:
noremap <C-c>c :BD!<CR>

noremap <leader>] :bnext<CR>
noremap <leader>[ :bprev<CR>

" === Windows ================================================================

" Cycle forward through windows:
nnoremap <Tab> <C-w>w

" Cycle backward through windows:
nnoremap <S-Tab> <C-w>W

" Show the list of all windows:
if has('nvim')
	" Not supported yet
else
	nnoremap <leader>w :Windows<CR>
endif

" === Tabs ===================================================================

" Ctrl+\ = next tab
noremap <C-\> gt

" Ctrl+c = close tab
"noremap <C-c>c :tabclose<CR>
"
" Kill the current buffer with ctrl+c
"map <C-c> :BD!<cr>
"map <C-c> :bd<CR>
"
" Show all tabs
noremap <leader>t :tabs<CR>

" === Navigation ==============================================================

" Disable arrow keys:

noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

" === Display & status ========================================================

" Set the title of the window to the working directory:
if has('gui_running')
  set guitablabel=(%N)\ %t\ %M
endif

" === Backup / History / Undo =================================================

" Disable Command-z (D) for undo in MacVim:
noremap <D-Z> <nop>
inoremap <D-Z> <nop>

set history=1000
set undolevels=1000

set nobackup
set noswapfile

set undodir=~/.nvim-tmp/undo//     " undo files
set backupdir=~/.nvim-tmp/backup// " backups
set directory=~/.nvim-tmp/swap//   " swap files

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

" === Marks ==================================================================

" Show marks (with fzf):
if has('nvim')
  " Not yet supported
  noremap <leader>m <cmd>lua FZF.marks()<CR>
else
  nnoremap <leader>m :Marks<CR>
endif

" === Registers ==============================================================

" Show registers
if has('nvim')
	" Not yet supported
  noremap <leader>r <cmd>lua FZF.registers()<CR>
else
	nnoremap <leader>r :registers<CR>
endif

" === wildmenu key behavior ==================================================

" === Complete menu behavior =================================================

" Navigate the complete menu items using <up> and <down> like <C-n> and <C-p>:
inoremap <expr> <Down> pumvisible() ? "<C-n>" : "<Down>"
inoremap <expr> <Up> pumvisible() ? "<C-p>" : "<Up>"

" Select the complete menu item like <C-y> would with <CR>:
inoremap <expr> <Right> pumvisible() ? "<C-y>" : "<Right>"
inoremap <expr> <CR> pumvisible() ? "<C-y>" : "<CR>"

" Cancel the complete menu like <C-e> would with <Left>:
inoremap <expr> <Left> pumvisible() ? "<C-e>" : "<Left>"

" === Theme ===================================================================

" Note: Needs `set termguicolors` in order to work

colorscheme solarized8
"colorscheme solarized8_flat
"colorscheme solarized8_high
"colorscheme solarized8_low
" Sometimes needed in addition:
set background=dark
"set background=light

" === Useful shortcuts ========================================================

" Replace the current word with the previously yanked word
noremap <C-j> cw<C-r>0<ESC>

" === better whitespace =======================================================

" Strip whitespace on save
let g:better_whitespace_enabled = 1
let g:strip_whitespace_confirm = 0
let g:strip_whitespace_on_save = 1

" === fuzzy finding ============================================================

" Point to the fzf homebrew installation:
set rtp+=/usr/local/opt/fzf

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" Find files:
if has('nvim')
	" Using telescope:
  noremap <leader>p <cmd>lua FZF.files()<CR>
else
	" Using fzf:
	noremap <leader>p :Files <CR>
	noremap <leader>P :GFiles <CR>
endif

" grepping (https://github.com/ibhagwan/fzf-lua)
if has('nvim')
  " Grep using ripgrep with globbing:
  noremap <leader>f <cmd>lua FZF.live_grep_glob()<CR>
  " Grep with previous input:
  " noremap <leader>F <cmd>lua FZF.live_grep_resume()<CR>
  " Grep for word under cursor:
  noremap <leader>g <cmd>lua FZF.grep_cword()<CR>
else
	" Use Ripgrep + fzf (requires `brew install ripgrep`)
	noremap <leader>f :Rg<CR>
endif

" === CoC bindings & behavior ================================================

" From https://oren.github.io/articles/rust/neovim/

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gD <Plug>(coc-declaration)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gR <Plug>(coc-references-used)

" Run the Code Lens action on the current line
nmap <leader>cl  <Plug>(coc-codelens-action)

" Taken from https://superuser.com/a/1736756
"
" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use K to show documentation in preview window.
"nnoremap <silent> K :call <SID>ShowDocumentation()<CR>
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    if CocAction('hasProvider', 'hover')
      call CocActionAsync('doHover')
    else
      call feedkeys('K', 'in')
    endif
  endif
endfunction

" === File exploration =========================================================
" Set the netrw window size:
let g:netrw_winsize = 24
"
" " Toggle netrw left-hand list view with ctrl+n
" https://www.reddit.com/r/neovim/comments/z86ife/check_if_explore_is_open/
"lua vim.keymap.set("n", "<leader>n", function() if (vim.api.nvim_buf_get_option(0, "filetype")=="netrw") then vim.api.nvim_exec("close", false) else vim.api.nvim_exec(":Sex!", false) end end, {})

" Use netrw otherwise
noremap <leader>n :Lexplore<return><esc>

" === Custom ESC behavior =====================================================

" Clear highlighting after pressing esc and dismiss any CoC float menus
nnoremap <esc> :noh<return><esc>
"nnoremap <esc> :noh<return><esc> call coc#floats#close_all()

" === vim-airline =============================================================

" Enable vim-airline
let g:airline#extensions#tabline#enabled=1

" Show the buffer number next to the name:
let g:airline#extensions#tabline#buffer_nr_show=1

" === Format JSON =============================================================

:command FormatJson %!python -m json.tool
