" Use Vim settings:
" This must be first, because it changes other options as a side effect.
set nocompatible

" Set leader to space
let mapleader = "\<Space>"

" Leader keypress delay before accepting command:
set timeoutlen=500

" ~~~~ vim-plug ~~~~
call plug#begin('~/.vim/plugged')
 Plug 'vim-syntastic/syntastic'
 Plug 'tpope/vim-vinegar'
 Plug 'tpope/vim-surround'
 Plug 'mileszs/ack.vim'
 Plug 'junegunn/fzf.vim'
 Plug 'qpkorr/vim-bufkill'
 Plug 'tomtom/tcomment_vim'
 Plug 'ntpeters/vim-better-whitespace'
 Plug 'vim-airline/vim-airline'
 Plug 'vim-airline/vim-airline-themes'
 Plug 'Valloric/YouCompleteMe'
 Plug 'preservim/nerdtree'
 "Plug 'tpope/vim-fugitive'
 Plug 'kshenoy/vim-signature'
 Plug 'rust-lang/rust.vim'
call plug#end()

filetype plugin indent on " required for vundle

" Make backspace behave in a sane manner.
set backspace=indent,eol,start

" Switch syntax highlighting on
syntax on

" Enable file type detection and do language-dependent indenting.
filetype plugin indent on

" Show line numbers
set number

" Set relative line number
set relativenumber

" Allow hidden buffers, don't limit to 1 file per window/split
set hidden

" Don't wrap lines by default
set nowrap

" Show the ruler
set ruler

" Show the column marker at 80 chars
set colorcolumn=80

" Number of visual spaces per TAB
set tabstop=2

" Number of spaces to use for (auto)indent step
set shiftwidth=2

" Add full file path to your existing statusline
set statusline+=%F

" Tabs are spaces
set expandtab

" Highlight current line
set cursorline

" What font do I want?
set guifont=Monaco:h14

" highlight matches
set hlsearch

" incremental searching
set incsearch

" searches are case insensitive...
set ignorecase

" auto re-read file contents if they've changed on disk:
set autoread

" clear highlighted search matches
nnoremap <leader><space> :nohlsearch<CR>

" ... unless they contain at least one capital letter
set smartcase

" show matching braces and brackets
set showmatch

" enable wildmenu"
set wildmenu
set wildignorecase
set wildmode=full

" Show the current command in the bottom-right part of vim.
" For instance if you want to go to change the current word with 'cw', 'c'
" will first be displayed as the pending command
set showcmd

" Switch to the directory of the file that is being edited:
" set autochdir

" enable true color terminal support:
set termguicolors

" === Mouse ===================================================================

" Only allow mouse selection in normal+visual mode
set mouse=nv
"set mouse=
set selectmode=

" === Mac clipboard ===========================================================

" https://coderwall.com/p/v-st8w/vim-copy-to-system-clipboard-on-a-mac
" Copy to the system clipboard, in visual mode, via ''
vnoremap '' :w !pbcopy<CR><CR>

" === Buffers =================================================================

" Show the list of buffers using fzf:
noremap <leader>b :Buffers<CR>
noremap <leader><Tab> :Buffers<CR>

" Use Bufkill's :BD command to close a buffer while preserving the window:
noremap <C-c>c :BD!<CR>

" === Windows ================================================================

" Cycle forward through windows:
nnoremap <Tab> <C-w>w

" Cycle backward through windows:
nnoremap <S-Tab> <C-w>W

" Show the list of all windows:
nnoremap <leader>w :Windows<CR>

" === Tabs ===================================================================

" Ctrl+\ = next tab
noremap <C-\> gt

" Ctrl+c = close tab
"noremap <C-c>c :tabclose<CR>
"
" Kill the current buffer with ctrl+c
"map <C-c> :BD!<cr>
"map <C-c> :bd<CR>
"
" Show all tabs
noremap <leader>t :tabs<CR>

" === Navigation ==============================================================

" Disable arrow keys:

" - in insert mode:
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" - in normal mode:
nmap <up> <nop>
nmap <down> <nop>
nmap <left> <nop>
nmap <right> <nop>

" - in visual mode:
vmap <up> <nop>
vmap <down> <nop>
vmap <left> <nop>
vmap <right> <nop>

" === Display & status ========================================================

" Set the title of the window to the working directory:
if has('gui_running')
  set guitablabel=(%N)\ %t\ %M
endif

" === Backup / History / Undo =================================================

" Disable Command-z (D) for undo in MacVim:
noremap <D-Z> <nop>
inoremap <D-Z> <nop>

set history=1000
set undolevels=1000

set nobackup
set noswapfile

set undodir=~/.nvim-tmp/undo//     " undo files
set backupdir=~/.nvim-tmp/backup// " backups
set directory=~/.nvim-tmp/swap//   " swap files

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

" === Theme ===================================================================

" Note: Needs `set termguicolors` in order to work

colorscheme solarized8
"colorscheme solarized8_flat
"colorscheme solarized8_high
"colorscheme solarized8_low
" Sometimes needed in addition:
set background=dark
"set background=light

" === Useful shortcuts ========================================================

" Replace the current word with the previously yanked word
noremap <C-j> cw<C-r>0<ESC>

" === better whitespace =======================================================

" Strip whitespace on save
let g:better_whitespace_enabled = 1
let g:strip_whitespace_confirm = 0
let g:strip_whitespace_on_save = 1

" === fzf =====================================================================

" Point to the fzf homebrew installation:
set rtp+=/usr/local/opt/fzf

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" Bind ctrl+p to fzf's :Files command
" map <C-p> :Files <C-R>=expand('%:h')<CR>
noremap <C-p> :Files <CR>

" Prevent fzf from opening a file in the Nerdtree buffer
nnoremap <silent> <expr> <C-p> (expand('%') =~ 'NERD_tree' ? "\<c-w>\<c-w>" : '').":FZF\<cr>"

" === ag / ack ================================================================

" Take whatever's in the copy buffer register #0 and search with that:
noremap <leader>f :Ag<Space>

" === Syntastic ===============================================================

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" If this variable is enabled, syntastic in active mode will run syntax checks
" when buffers are first loaded, as well as on saving
let g:syntastic_check_on_open = 0

" In active mode syntax checks are normally run whenever buffers are written to
" disk, even when the writes happen just before quitting Vim.
let g:syntastic_check_on_wq = 1

" Use this option to tell syntastic whether to use the `:sign` interface to mark
let g:syntastic_enable_signs = 1
let g:syntastic_enable_balloons = 1

" Enable this option to tell syntastic to always stick any detected errors
" into the |location-list|
let g:syntastic_always_populate_loc_list = 1

" When set to 1 the error window will be automatically opened when errors are
" detected, and closed when none are detected
" let g:syntastic_auto_loc_list = 1

" Use this option to tell syntastic whether to use syntax highlighting to mark
" errors (where possible)
let g:syntastic_enable_highlighting = 1

" Sets the number of lines the error/warning location list is displayed with
let g:syntastic_loc_list_height = 3

highlight SyntasticErrorSign guifg=white guibg=red
highlight SyntasticErrorLine guibg=#2f0000

let g:syntastic_python_python_exec = 'python3'
let g:syntastic_python_checkers = ['python']

" === Syntastic > Rust ========================================================

" Auto format *.rs files upon save
let g:rustfmt_autosave = 1
let g:syntastic_rust_checkers = ['cargo']
"let g:syntastic_rust_checkers = ['rustc']
"let g:rustc_path = $HOME."/.cargo/bin/rustc"

" === YouCompleteMe > Rust ====================================================

let g:rust_src_path = $HOME.'/.cargo/rust-repo/src'

" === netrw ===================================================================

" Adapted from https://shapeshed.com/vim-netrw/

" let g:netrw_liststyle = 3
" let g:netrw_banner = 0
" let g:netrw_winsize = 18
"
" let g:NetrwIsOpen=0
"
" function! ToggleNetrw()
"     if g:NetrwIsOpen
"         let i = bufnr("$")
"         while (i >= 1)
"             if (getbufvar(i, "&filetype") == "netrw")
"                 silent exe "bwipeout " . i
"             endif
"             let i-=1
"         endwhile
"         let g:NetrwIsOpen=0
"     else
"         let g:NetrwIsOpen=1
"         silent Lexplore
"     endif
" endfunction
"
" " Toggle netrw left-hand list view with ctrl+n
" map <C-n> :call ToggleNetrw()<CR>

" ===  NERDTree ===============================================================

let NERDTreeShowLineNumbers = 1
autocmd FileType nerdtree setlocal relativenumber

" The following two options make it work well with vinegar.vim
let NERDTreeHijackNetrw = 1
let g:NERDTreeMapUpdir = "-"
let g:NERDTreeWinSize = 40
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
" When a file is opened, close the NERDTree window:
" let NERDTreeQuitOnOpen = 1
" https://stackoverflow.com/questions/21888869/how-to-make-ctrlps-search-directory-change-according-to-nerdtrees-root
let g:NERDTreeChDirMode = 2
"" Show hidden files
let g:NERDTreeShowFiles=1
"" Show bookmarks
" let g:NERDTreeShowBookmarks=1

" Toggle NerdTree
noremap <C-n> :NERDTreeToggle<CR>

" Clear highlighting after pressing esc
nnoremap <esc> :noh<return><esc>

" === vim-airline =============================================================

" Enable vim-airline
let g:airline#extensions#tabline#enabled=1

" Show the buffer number next to the name:
let g:airline#extensions#tabline#buffer_nr_show=1

" === Format JSON =============================================================

:command FormatJson %!python -m json.tool

